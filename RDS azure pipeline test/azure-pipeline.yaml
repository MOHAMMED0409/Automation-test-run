trigger:
- main

# Agent defined self-hosted
pool:
  name: Default # Self-hosted agent pool

# Parameter intialization
parameters:

- name: RESTORE_DATE
  displayName: 'Restore Date (yyyy-mm-dd)'
  type: string
  default: '2025-10-29'

- name: TIME
  displayName: 'Time'
  type: string
  default: '07:31'

- name: DB_NAMES
  displayName: 'Database Names (comma-separated)'
  type: string
  default: ''

- name: IOPS_TICKET
  displayName: 'IOPS Ticket Number'
  type: string
  default: 'IOPS-12345'

- name: SOURCE_DB
  displayName: 'RDS Instance Name'
  type: string
  default: 'prod-database'

- name: TEAM_NAME
  displayName: 'Team Name'
  type: string
  default: 'DataOps'

- name: USER_EMAILS
  displayName: 'User Emails (comma-separated, optional)'
  type: string
  default: 'mohammedkhashif02@gmail.com'

# Job-1 Set the AWS and Configure AWS Creds
jobs:
- job: SetupAWS
  displayName: 'Job 1 - Configure AWS Credentials from Azure Variables'
  steps:
  - script: |
      echo "Checking if AWS CLI is already installed..."
      if command -v aws &> /dev/null; then
        echo "AWS CLI is already installed. Skipping installation."
      else
        echo "AWS CLI not found. Installing..."
        sudo apt-get update && sudo apt-get install -y awscli
      fi
    displayName: 'Check and Install AWS CLI'

  - script: |
      echo "Setting AWS credentials from Azure environment variables..."
      export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
      export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
      export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
    displayName: 'Set AWS Credentials'

  - script: |
      echo "Verifying AWS credentials..."
      echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
      echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:4}****"
      echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    displayName: 'Configure and Verify AWS Credentials'

# Job-2 Collect Inputs from the users
- job: CollectInputs
  displayName: 'Job 2 - Collect Input Parameters'
  steps:
  - script: |
      echo "Date: ${{ parameters.RESTORE_DATE }}"
      echo "Time: ${{ parameters.TIME }}"
      echo "DB Names: ${{ parameters.DB_NAMES }}"
      echo "IOPS Ticket: ${{ parameters.IOPS_TICKET }}"
      echo "RDS Instance: ${{ parameters.SOURCE_DB }}"
      echo "Team Name: ${{ parameters.TEAM_NAME }}"

      if [ -n "${{ parameters.USER_EMAILS }}" ]; then
        echo "User Emails: ${{ parameters.USER_EMAILS }}"
      else
        echo "No user emails provided. Skipping user creation."
      fi
    displayName: 'Echo Input Parameters with Optional Email Handling'

# Job-3 RDS Point in time restoration
- job: RestoreRDS
  displayName: 'Job 3 - Perform RDS Point-in-Time Restore'
  dependsOn: CollectInputs
  steps:
  - script: |
      echo "[INFO] Starting RDS Point-in-Time Restore..."

      REGION="$AWS_DEFAULT_REGION"
      SOURCE_DB="${{ parameters.DB_NAMES }}"
      IOPS_TICKET="${{ parameters.IOPS_TICKET }}"
      TARGET_DB="Temp-${SOURCE_DB}-${IOPS_TICKET}"
      RESTORE_TIMESTAMP="${{ parameters.RESTORE_DATE }}T${{ parameters.TIME }}:00Z"

      echo "[INFO] Restore Time: $RESTORE_TIMESTAMP"
      echo "[INFO] Installing jq if not present..."
      if ! command -v jq &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y jq
      fi

      echo "[INFO] Fetching source DB configuration..."
      DB_INFO=$(aws rds describe-db-instances \
        --region "$REGION" \
        --db-instance-identifier "$SOURCE_DB" \
        --query "DBInstances[0]" \
        --output json)

      INSTANCE_CLASS=$(echo "$DB_INFO" | jq -r '.DBInstanceClass')
      SUBNET_GROUP=$(echo "$DB_INFO" | jq -r '.DBSubnetGroup.DBSubnetGroupName')
      VPC_SG_IDS=$(echo "$DB_INFO" | jq -r '.VpcSecurityGroups[].VpcSecurityGroupId' | paste -sd "," -)
      STORAGE_TYPE=$(echo "$DB_INFO" | jq -r '.StorageType')

      echo "[INFO] Starting RDS restore..."
      aws rds restore-db-instance-to-point-in-time \
        --region "$REGION" \
        --source-db-instance-identifier "$SOURCE_DB" \
        --target-db-instance-identifier "$TARGET_DB" \
        --restore-time "$RESTORE_TIMESTAMP" \
        --no-multi-az \
        --db-instance-class "$INSTANCE_CLASS" \
        --db-subnet-group-name "$SUBNET_GROUP" \
        --vpc-security-group-ids "$VPC_SG_IDS" \
        --storage-type "$STORAGE_TYPE" \
        --publicly-accessible \
        --tags Key=RestoredBy,Value=AzurePipeline

      echo "[INFO] Waiting for $TARGET_DB to become available..."
      aws rds wait db-instance-available \
        --region "$REGION" \
        --db-instance-identifier "$TARGET_DB"

      echo "[SUCCESS] Restore completed for DB instance: $TARGET_DB"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    displayName: 'Restore RDS to Point-in-Time'