trigger:
- main

# Agent defined self-hosted
pool:
  name: Default # Self-hosted agent pool

# Parameter intialization
parameters:

- name: RESTORE_DATE
  displayName: 'Restore Date (yyyy-mm-dd)'
  type: string
  default: '2025-10-30'

- name: TIME
  displayName: 'Time'
  type: string
  default: '06:40'

- name: DB_NAMES
  displayName: 'Database Names (comma-separated)'
  type: string
  default: 'production_db'

- name: IOPS_TICKET
  displayName: 'IOPS Ticket Number'
  type: string
  default: 'IOPS-12345'

- name: SOURCE_DB
  displayName: 'RDS Instance Name'
  type: string
  default: 'prod-database'

- name: TEAM_NAME
  displayName: 'Team Name'
  type: string
  default: 'DataOps'

- name: USER_EMAILS
  displayName: 'User Emails (comma-separated, optional)'
  type: string
  default: 'mohammedkhashif02@gmail.com'

# Job-1 Set the AWS and Configure AWS Creds
jobs:
- job: SetupAWS
  displayName: 'Job 1 - Configure AWS CLI and Credentials'
  steps:
  - script: |
      echo "[INFO] Checking if AWS CLI is already installed..."
      if command -v aws &> /dev/null; then
        echo "[INFO] AWS CLI is already installed. Skipping installation."
      else
        echo "[INFO] Installing AWS CLI..."
        sudo apt-get update -y
        sudo apt-get install -y awscli
      fi

      echo "[INFO] Checking if jq is installed..."
      if command -v jq &> /dev/null; then
        echo "[INFO] jq is already installed. Skipping installation."
      else
        echo "[INFO] Installing jq..."
        sudo apt-get install -y jq
      fi

      echo "[INFO] Verifying installed versions..."
      aws --version
      jq --version
    displayName: 'Install AWS CLI and jq'

  - script: |
      echo "[INFO] Setting AWS credentials from Azure environment variables..."
      export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
      export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
      export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
      echo "[INFO] AWS credentials configured successfully."
    displayName: 'Set AWS Credentials'

  - script: |
      echo "[INFO] AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
      echo "[INFO] AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:4}****"
      echo "[INFO] AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"

      echo "[INFO] Validating AWS connection..."
      aws sts get-caller-identity --region "$AWS_DEFAULT_REGION"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    displayName: 'Verify AWS Credentials and Connection'

# Job-2 Collect Inputs from the users
- job: CollectInputs
  displayName: 'Job 2 - Collect Input Parameters'
  steps:
  - script: |
      echo "Date: ${{ parameters.RESTORE_DATE }}"
      echo "Time: ${{ parameters.TIME }}"
      echo "DB Names: ${{ parameters.DB_NAMES }}"
      echo "IOPS Ticket: ${{ parameters.IOPS_TICKET }}"
      echo "RDS Instance: ${{ parameters.SOURCE_DB }}"
      echo "Team Name: ${{ parameters.TEAM_NAME }}"

      if [ -n "${{ parameters.USER_EMAILS }}" ]; then
        echo "User Emails: ${{ parameters.USER_EMAILS }}"
      else
        echo "No user emails provided. Skipping user creation."
      fi
    displayName: 'Echo Input Parameters with Optional Email Handling'

# Job-3 RDS Point-in-Time Restoration
- job: RestoreRDS
  displayName: 'Job 3 - Perform RDS Point-in-Time Restoration'
  dependsOn: CollectInputs
  steps:
  - script: |
      REGION="$AWS_DEFAULT_REGION"
      SOURCE_DB="${{ parameters.SOURCE_DB }}"
      IOPS_TICKET="${{ parameters.IOPS_TICKET }}"
      RESTORE_DATE="${{ parameters.RESTORE_DATE }}"
      RESTORE_TIME="${{ parameters.TIME }}"

      NEW_DB_ID="Temp-${SOURCE_DB}-restored-${RESTORE_DATE//-/}-${IOPS_TICKET}"
      RESTORE_TIMESTAMP="${RESTORE_DATE}T${RESTORE_TIME}:00Z"

      echo "[INFO] Region: $REGION"
      echo "[INFO] Source DB: $SOURCE_DB"
      echo "[INFO] Target DB: $NEW_DB_ID"
      echo "[INFO] Restore Timestamp: $RESTORE_TIMESTAMP"

      echo "[INFO] Fetching source DB configuration..."
      DB_INFO=$(aws rds describe-db-instances \
        --region "$REGION" \
        --db-instance-identifier "$SOURCE_DB" \
        --output json)

      INSTANCE_CLASS=$(echo "$DB_INFO" | jq -r '.DBInstances[0].DBInstanceClass')
      SUBNET_GROUP=$(echo "$DB_INFO" | jq -r '.DBInstances[0].DBSubnetGroup.DBSubnetGroupName')
      VPC_SG_IDS=$(echo "$DB_INFO" | jq -r '.DBInstances[0].VpcSecurityGroups[].VpcSecurityGroupId' | paste -sd "," -)
      STORAGE_TYPE=$(echo "$DB_INFO" | jq -r '.DBInstances[0].StorageType')

      echo "[INFO] Source configuration:"
      echo " - Instance Class: $INSTANCE_CLASS"
      echo " - Subnet Group: $SUBNET_GROUP"
      echo " - Security Groups: $VPC_SG_IDS"
      echo " - Storage Type: $STORAGE_TYPE"

      echo "[INFO] Starting RDS restore..."
      aws rds restore-db-instance-to-point-in-time \
        --region "$REGION" \
        --source-db-instance-identifier "$SOURCE_DB" \
        --target-db-instance-identifier "$NEW_DB_ID" \
        --restore-time "$RESTORE_TIMESTAMP" \
        --no-multi-az \
        --db-instance-class "$INSTANCE_CLASS" \
        --db-subnet-group-name "$SUBNET_GROUP" \
        --vpc-security-group-ids $VPC_SG_IDS \
        --storage-type "$STORAGE_TYPE" \
        --publicly-accessible \
        --tags Key=RestoredBy,Value=AzurePipeline \
        --output text   # Fix: avoid JSON output parsing issue

      echo "[INFO] Waiting for $NEW_DB_ID to become available..."
      aws rds wait db-instance-available \
        --region "$REGION" \
        --db-instance-identifier "$NEW_DB_ID"

      echo "Restore successful! DB instance: $NEW_DB_ID"

      echo "[INFO] Fetching new endpoint..."
      NEW_ENDPOINT=$(aws rds describe-db-instances \
        --region "$REGION" \
        --db-instance-identifier "$NEW_DB_ID" \
        --query "DBInstances[0].Endpoint.Address" \
        --output text)

      echo "New DB Endpoint: $NEW_ENDPOINT"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    displayName: 'Perform RDS Point-in-Time Restore using Source Config'
